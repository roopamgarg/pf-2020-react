{"version":3,"sources":["components/layouts/layout.js","components/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["Layout","props","className","href","exact","activeClassName","target","type","children","Loader","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","options","height","width","Experience","lazy","About","Project","Contact","renderData","App","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOA0DeA,EAtDA,SAAAC,GAEb,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UACb,6BACE,yBAAKA,UAAU,kBAEjB,wBAAIA,UAAU,eAAd,eACA,uBAAGA,UAAU,gBAAb,4BACA,yBAAKA,UAAU,iBAEjB,yBAAKA,UAAU,cACb,wBAAIA,UAAU,OACZ,wBAAIA,UAAU,YAAW,uBAAGC,KAAK,SAASC,OAAK,EAACC,gBAAgB,eAAvC,UACzB,wBAAIH,UAAU,YAAW,uBAAGC,KAAK,cAAcE,gBAAgB,eAAtC,eACzB,wBAAIH,UAAU,YAAW,uBAAGC,KAAK,YAAYE,gBAAgB,eAApC,aACzB,wBAAIH,UAAU,YAAW,uBAAGC,KAAK,WAAWE,gBAAgB,eAAnC,cAG7B,yBAAKH,UAAU,qBACb,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,YACZ,uBAAGI,OAAO,SAASH,KAAK,0CACtB,kBAAC,IAAD,CAAMI,KAAK,gBAGf,wBAAIL,UAAU,YACZ,uBAAGI,OAAO,SAASH,KAAK,iCACtB,kBAAC,IAAD,CAAMI,KAAK,aAGf,wBAAIL,UAAU,YACZ,uBACEI,OAAO,SACPH,KAAK,sDAEL,kBAAC,IAAD,CAAMI,KAAK,eAGf,wBAAIL,UAAU,YACZ,uBAAGI,OAAO,SAASH,KAAK,kCACtB,kBAAC,IAAD,CAAMI,KAAK,iBAMrB,yBAAKL,UAAU,mBAAmBD,EAAMO,Y,gCC1B/BC,MAvBf,SAAgBR,GACd,IAAMS,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,EACfC,iBAAkB,CAChBC,oBAAqB,mBAGzB,OACE,yBAAKb,UAAU,iBAGX,kBAAC,IAAD,CACEc,QAASN,EACTO,OAAQ,IACRC,MAAO,QCbXC,EAAaC,gBAAK,kBAAM,uDACxBC,EAAQD,gBAAK,kBAAM,8DACnBE,EAAUF,gBAAK,kBAAM,uDACrBG,EAAUH,gBAAK,kBAAM,8DAErBI,EAAa,WAEjB,OACE,kBAAC,WAAD,KACE,kBAACH,EAAD,MAEA,kBAACF,EAAD,MACA,kBAACG,EAAD,MACA,kBAACC,EAAD,QA2BSE,MAZf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,WAAD,CAAUwB,SAAU,kBAAC,EAAD,OAAaF,SC5BvBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.02f9ab0a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./layout.css\";\nimport { Icon } from \"antd\";\nimport { Link,NavLink} from \"react-router-dom\";\nconst Layout = props => {\n  \n  return (\n    <div className=\"layout\">\n      <div className=\"layout-header\">\n        <div className=\"header\">\n          <div>\n            <div className=\"header-image\"></div>\n          </div>\n          <h1 className=\"header-name\">Roopam Garg</h1>\n          <p className=\"header-title\">Full Stack Web Developer</p>\n          <div className=\"header-dash\"></div>\n        </div>\n        <div className=\"layout-nav\">\n          <ul className=\"nav\">\n            <li className=\"nav-item\"><a href=\"#about\" exact activeClassName=\"active-link\">About</a></li>\n            <li className=\"nav-item\"><a href=\"#experience\" activeClassName=\"active-link\">Experience</a></li>\n            <li className=\"nav-item\"><a href=\"#projects\" activeClassName=\"active-link\">Projects</a></li>\n            <li className=\"nav-item\"><a href=\"#contact\" activeClassName=\"active-link\">Contact</a></li>\n          </ul>\n        </div>\n        <div className=\"layout-social-nav\">\n          <ul className=\"social-nav\">\n            <li className=\"nav-item\">\n              <a target=\"_blank\" href=\"https://www.instagram.com/_roopamgarg/\">\n                <Icon type=\"instagram\" />\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a target=\"_blank\" href=\"https://github.com/roopamgarg\">\n                <Icon type=\"github\" />\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a\n                target=\"_blank\"\n                href=\"https://www.linkedin.com/in/roopam-garg-8135a8158/\"\n              >\n                <Icon type=\"linkedin\" />\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a target=\"_blank\" href=\"https://twitter.com/roopamg777\">\n                <Icon type=\"twitter\" />\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div className=\"layout-content \">{props.children}</div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../../assets/loader.json\";\nimport \"./Loader.css\";\nfunction Loader(props) {\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  return (\n    <div className=\"loader fadeIn\">\n      {/* <img className=\"loader__logo\" src={logo} alt=\"logo\"/> */}\n      \n        <Lottie\n          options={defaultOptions}\n          height={400}\n          width={400}\n        />\n      \n    </div>\n  );\n}\n\nexport default Loader;","import React, { Fragment, lazy, Suspense } from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport Layout from \"./components/layouts/layout\";\nimport Loader from \"./components/Loader/Loader\";\nconst Experience = lazy(() => import(\"./components/experience/experience\"));\nconst About = lazy(() => import(\"./components/about/about\"));\nconst Project = lazy(() => import(\"./components/projects/projects\"));\nconst Contact = lazy(() => import(\"./components/contact/contact\"));\n\nconst renderData = () => {\n  // if (window.innerWidth <= 800) {\n  return (\n    <Fragment>\n      <About />\n\n      <Experience />\n      <Project />\n      <Contact />\n    </Fragment>\n  );\n  // } else {\n  //   return (\n  //     <Fragment>\n  //       <Route path=\"/\" exact component={About} />\n\n  //       <Route path=\"/experience\" exact component={Experience} />\n  //       <Route path=\"/projects\" exact component={Project} />\n  //       <Route path=\"/contact\" exact component={Contact} />\n  //     </Fragment>\n  //   );\n  // }\n};\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Layout>\n          <Suspense fallback={<Loader />}>{renderData()}</Suspense>\n        </Layout>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}